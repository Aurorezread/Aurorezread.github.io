<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>websocket的初步使用</title>
      <link href="/2023/09/15/websocket%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/09/15/websocket%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>一.判断初始化条件（通讯地址）</strong></p><!--可以理解为需要一个通信对象，不然怎么知道跟谁通信呢--><p>websocket的通讯地址一般都是在env（环境中）里面设定好的，或者说通过请求去获取</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.判断通过请求获取通讯地址的途径</span></span><br><span class="line"><span class="comment">// 3.判断通过本地变量获取通讯地址的途径（一般在第二次开始）</span></span><br><span class="line"><span class="comment">// 2.判断通过env获取通讯地址的途径</span></span><br><span class="line">initWebSocket () &#123;</span><br><span class="line">      <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;process.env.VUE_APP_PUBLIC_PATH&#125;</span>baseUrl.json`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">json</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> wsServer = <span class="variable language_">this</span>.<span class="property">wsUrl</span> ? <span class="variable language_">this</span>.<span class="property">wsUrl</span> : (data.<span class="property">wsUrl</span> ? data.<span class="property">wsUrl</span> : process.<span class="property">env</span>.<span class="property">VUE_APP_WS_API</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">webSocketConnect</span>(wsServer)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> wsServer = <span class="variable language_">this</span>.<span class="property">wsUrl</span> ? <span class="variable language_">this</span>.<span class="property">wsUrl</span> : process.<span class="property">env</span>.<span class="property">VUE_APP_WS_API</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">webSocketConnect</span>(wsServer)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>二.开始初始化websocket</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化成功和失败 </span></span><br><span class="line">webSocketConnect (wsServer) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&#x27;WebSocket&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">websocket</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(wsServer)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error: WebSocket is not supported by this browser.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><strong>三.建立websocket的状态处置</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接错误</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="property">onerror</span> = <span class="variable language_">this</span>.<span class="property">websocketOnerror</span></span><br><span class="line">----------</span><br><span class="line"> websocketOnerror () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;WebSocket连接发生错误！&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// 连接成功</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="property">onopen</span> = <span class="variable language_">this</span>.<span class="property">websocketOnopen</span></span><br><span class="line">----------</span><br><span class="line"> websocketOnopen () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;WebSocket连接成功！&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// 收到消息的回调</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="property">onmessage</span> = <span class="variable language_">this</span>.<span class="property">websocketOnmessage</span></span><br><span class="line">----------</span><br><span class="line">websocketOnmessage (event) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>)</span><br><span class="line">      <span class="comment">// &#123;status: true&#125; websocket连接正常</span></span><br><span class="line">      <span class="comment">// &#123;errorType: 401, message: &quot;该用户无权限访问数据&quot;, status: false&#125; 无权限</span></span><br><span class="line">      <span class="keyword">if</span> (!response.<span class="property">status</span> &amp;&amp; response.<span class="property">errorType</span> !== <span class="number">401</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">initWebSocket</span>()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!response.<span class="property">status</span> &amp;&amp; response.<span class="property">errorType</span> === <span class="number">401</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">closeWebSocket</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// websocketResponse 这个时候外部的一个函数，把消息传递过去</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">websocketResponse</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">websocketResponse</span>(response)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// 连接关闭的回调</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="property">onclose</span> = <span class="variable language_">this</span>.<span class="property">websocketClose</span></span><br><span class="line">----------</span><br><span class="line"> websocketClose () &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">interval</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">interval</span> = <span class="literal">null</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">beforeClose</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">websocket</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="title function_">close</span>()</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p><strong>三.建立实时通信（心跳）</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">initWebSocket</span>()</span><br><span class="line">      <span class="comment">// 心跳检测： 频率 1分钟 或者30s 根据业务模块</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">interval</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">websocket</span>.<span class="title function_">send</span>(<span class="string">&#x27;PING&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">30000</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>放大镜实现</title>
      <link href="/2023/09/15/%E6%94%BE%E5%A4%A7%E9%95%9C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/09/15/%E6%94%BE%E5%A4%A7%E9%95%9C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>工作中遇到一个需求，需要在element UI 的Image组件预览图片的同时添加一个放大镜功能。</p><p>——思考了一会，在不改动源码的基础上，在外部构建一个图片盒子，以获取当前需要放大图片的URL地址，并实时获取鼠标在图片中的移动位置来进行放大的效果。</p></blockquote><p><strong>1.首先，在外部设置一个空的图片容器</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 放大镜容器 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;movemax-box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;movemax-box-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">----------css样式-----------</span></span><br><span class="line"><span class="language-xml">.movemax-box</span></span><br><span class="line"><span class="language-xml">  display none</span></span><br><span class="line"><span class="language-xml">  position absolute</span></span><br><span class="line"><span class="language-xml">  top 0</span></span><br><span class="line"><span class="language-xml">  left 0</span></span><br><span class="line"><span class="language-xml">  z-index 999999999999999999 !important</span></span><br><span class="line"><span class="language-xml">  border 1px solid #000</span></span><br><span class="line"><span class="language-xml">  width 200px</span></span><br><span class="line"><span class="language-xml">  height 200px</span></span><br><span class="line"><span class="language-xml">  background-color #fff</span></span><br><span class="line"><span class="language-xml">  .movemax-box-img</span></span><br><span class="line"><span class="language-xml">    position absolute</span></span><br><span class="line"><span class="language-xml">    left 0</span></span><br><span class="line"><span class="language-xml">    top 0</span></span><br><span class="line"><span class="language-xml">    z-index 99999999</span></span><br></pre></td></tr></table></figure><p><strong>2.创建一个js文件（核心代码）</strong></p><p>这里只调试了1920*1080的适配，如果需要在其他尺寸上可以调试添加</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 放大镜组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MagnifyingGlass</span> (image) &#123;</span><br><span class="line">  <span class="keyword">const</span> maxBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.movemax-box&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> maxBoxImg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.movemax-box-img&#x27;</span>)</span><br><span class="line">  <span class="comment">// 赋予放大镜盒子img图片地址</span></span><br><span class="line">  maxBox.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  image.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    maxBoxImg.<span class="property">src</span> = image.<span class="property">src</span></span><br><span class="line">    maxBox.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">    maxBox.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;hidden&#x27;</span></span><br><span class="line">    <span class="comment">// maxBox.style = &#x27;9999999&#x27;</span></span><br><span class="line">    <span class="comment">// console.log(e, &#x27;鼠标进入效果&#x27;)</span></span><br><span class="line">    <span class="comment">// 禁用鼠标滚轮事件</span></span><br><span class="line">    <span class="comment">// image.addEventListener(&#x27;mousewheel&#x27;, this.scrollFunc, false)</span></span><br><span class="line">    <span class="comment">// image.onmousewheel = image.onmousewheel = this.scrollFunc// IE/Opera/Chrome</span></span><br><span class="line">  &#125;)</span><br><span class="line">  image.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>()</span><br><span class="line">    <span class="keyword">const</span> x = e.<span class="property">pageX</span> - image.<span class="title function_">getBoundingClientRect</span>().<span class="property">x</span></span><br><span class="line">    <span class="keyword">const</span> y = e.<span class="property">pageY</span> - image.<span class="title function_">getBoundingClientRect</span>().<span class="property">y</span></span><br><span class="line">    <span class="comment">// console.log(&#x27;width:&#x27; + maxBoxImg.width + &#x27;,height:&#x27; + maxBoxImg.height)</span></span><br><span class="line">    maxBox.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> - <span class="number">350</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    maxBox.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> - <span class="number">480</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    <span class="comment">// * 2 代表2倍图  可以修改成参数输入</span></span><br><span class="line">    maxBoxImg.<span class="property">width</span> = image.<span class="property">width</span> * <span class="number">2</span></span><br><span class="line">    maxBoxImg.<span class="property">height</span> = image.<span class="property">height</span> * <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (screen.<span class="property">width</span> &lt;= <span class="number">1440</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1440</span>, x)</span><br><span class="line">      <span class="keyword">if</span> (y &lt; <span class="number">150</span> &amp;&amp; x &gt; <span class="number">450</span>) &#123;</span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> - <span class="number">340</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &lt; <span class="number">250</span> &amp;&amp; x &lt; <span class="number">450</span>) &#123;</span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">500</span>) &#123;</span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> - <span class="number">160</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> - <span class="number">320</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> - <span class="number">250</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (screen.<span class="property">width</span> &lt;= <span class="number">1920</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1920</span>)</span><br><span class="line">      <span class="keyword">if</span> (y &lt; <span class="number">250</span> &amp;&amp; x &gt; <span class="number">450</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;y &lt; 250 &amp;&amp; x &gt; 450&#x27;)</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> - <span class="number">350</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        <span class="comment">// maxBoxImg.style.left = -(moveX * x) + 150 + &#x27;px&#x27;</span></span><br><span class="line">        <span class="comment">// maxBoxImg.style.top = -(moveY * y) + &#x27;px&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &lt; <span class="number">250</span> &amp;&amp; x &lt; <span class="number">450</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;y &lt; 250 &amp;&amp; x &lt; 450&#x27;)</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> + <span class="number">50</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> + <span class="number">50</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        <span class="comment">// maxBoxImg.style.top = -(moveY * y) + &#x27;px&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">600</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;x &lt; 600&#x27;)</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> + <span class="number">50</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> - <span class="number">130</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;else&#x27;)</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> - <span class="number">250</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> - <span class="number">250</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (screen.<span class="property">width</span> &lt;= <span class="number">3840</span>) &#123;</span><br><span class="line">      <span class="comment">// 定位盒子  跟着始终保持在鼠标上方</span></span><br><span class="line">      <span class="keyword">if</span> (y &lt; <span class="number">450</span> &amp;&amp; x &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> - <span class="number">450</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &lt; <span class="number">450</span> &amp;&amp; x &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">600</span>) &#123;</span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> - <span class="number">220</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> - <span class="number">450</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">        maxBox.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> - <span class="number">600</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 图片移动</span></span><br><span class="line">    maxBoxImg.<span class="property">style</span>.<span class="property">left</span> = -(<span class="number">2</span> * x) + <span class="number">110</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    maxBoxImg.<span class="property">style</span>.<span class="property">top</span> = -(<span class="number">2</span> * y) + <span class="number">110</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    <span class="comment">//  边界处的处理</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">      maxBoxImg.<span class="property">style</span>.<span class="property">left</span> = -(<span class="number">2</span> * x) + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">      maxBoxImg.<span class="property">style</span>.<span class="property">left</span> = -(<span class="number">2</span> * x) + <span class="number">150</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">      maxBoxImg.<span class="property">style</span>.<span class="property">top</span> = -(<span class="number">2</span> * y) + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &gt;= image.<span class="property">height</span> * <span class="number">0.95</span>) &#123;</span><br><span class="line">      maxBoxImg.<span class="property">style</span>.<span class="property">top</span> = -(<span class="number">2</span> * y) + <span class="number">180</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  image.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    maxBox.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    maxBoxImg.<span class="property">src</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">// console.log(e, &#x27;鼠标离开效果&#x27;)</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MagnifyingGlass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.触发方式</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// .sc-image-viewer__img 为需要被放大的图片容器元素</span></span><br><span class="line">        <span class="keyword">const</span> image = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.sc-image-viewer__img&#x27;</span>)</span><br><span class="line">        <span class="comment">// MagnifyingGlass 为上面单独封装的js文件（引入后调用即可）</span></span><br><span class="line">        image &amp;&amp; <span class="title class_">MagnifyingGlass</span>(image)</span><br><span class="line">      &#125;, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新手+的Git</title>
      <link href="/2023/09/15/%E6%96%B0%E6%89%8B+%E7%9A%84Git/"/>
      <url>/2023/09/15/%E6%96%B0%E6%89%8B+%E7%9A%84Git/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>Git是分布式版本控制系统，简单来说就是每个人都可以通过本地系统操控远程版本进行迭代，它的工作模式就是依赖本地更新后推送远端进行托管，以至于更好的风险管控和项目维护。</em></p></blockquote><h4 id="1-新手期的Git-——熟练的三板斧"><a href="#1-新手期的Git-——熟练的三板斧" class="headerlink" title="1.新手期的Git ——熟练的三板斧"></a>1.新手期的Git <em>——熟练的三板斧</em></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;备注&#x27;</span></span><br><span class="line">git push</span><br><span class="line">～～收工～～</span><br></pre></td></tr></table></figure><p>​       初始入门一般不会遇到太多的东西，因为都是从易到难的过程，如果一上来就各种疑难杂症的问题，估计先踏入的一只脚都收回去了。Git只是一个工具，懂得怎么用就行了，初生牛犊可不杵上来就一顿操作猛如虎，就几行命令，干就完了。</p><p>  刚开始我们的认知都是这样，简单将文件流转通过三个区域，最终push进远端仓库进行保存～～</p><img src="/Users/dongfeilong/Library/Application Support/typora-user-images/image-20230313214907291.png" alt="image-20230313214907291" style="zoom: 33%;"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下是用的最多也是刚入门常用的命令</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">git init -- 初始化仓库（生成 .<span class="property">git</span>的隐藏文件）</span><br><span class="line">git clone -- 或者不需要init直接从远端仓库克隆项目</span><br><span class="line">git clone -b anan <span class="attr">http</span>:<span class="comment">//xxxxxx/service/tmall-service.git  -- 指定克隆和创建本地分支（其中 anan 为分支名 根据实际情况更改）</span></span><br><span class="line">git status 查看文件状态 -- 红色为未跟踪文件，绿色为已填加的文件</span><br><span class="line">  --ignored      列出被忽略的文件</span><br><span class="line">  --short/ -s    简洁的输出格式</span><br><span class="line">git remote -v  查看是否与仓库建立联系</span><br></pre></td></tr></table></figure><h4 id="2-多人协作的Git-——即是方便也是麻烦"><a href="#2-多人协作的Git-——即是方便也是麻烦" class="headerlink" title="2.多人协作的Git ——即是方便也是麻烦"></a>2.多人协作的Git <em>——即是方便也是麻烦</em></h4><p><em>—— 一个人干一件活跟多人干一件活，效率是大大不同的，这是Git最方便的地方，但往往最麻烦的也这里</em></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分支被覆盖的问题</span></span><br><span class="line">git pull = git fetch + git merge</span><br><span class="line"><span class="number">1.</span> 拉取远程代码到本地（git fetch --all）</span><br><span class="line"><span class="number">2.</span> 合并本地代码和远程的差异（git merge origin master）</span><br><span class="line">这个是<span class="title class_">Git</span>帮忙的操作，虽然简化了步骤，但是也带来一些风险。如:本地文件为提交暂存区，会拉取远程更新代码到未跟踪文件里，或者直接覆盖本地还未提交的代码。</span><br><span class="line">正常情况下应该先进行 add &gt; commit &gt; pull &gt; push （尤其是在多人不确定本地是否最新代码的时候）</span><br><span class="line">或者 &gt;&gt;&gt; git stash （暂存修改） &gt; pull &gt; git stash pop （恢复暂存的文件）</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码提交冲突的问题</span></span><br><span class="line">  比如说两个人分别用两个分支开发同一部分代码时，这时候两个人并没有意识到，当他们开发完成后，就会将修改的代码push到远程去请求合并。这个时候，<span class="title class_">Git</span>就会不明白要留用哪一个，冲突就这么产生了。</span><br><span class="line">  通常解决途径&gt;&gt;&gt;</span><br><span class="line">————————————————</span><br><span class="line"> git branch   -- 查看分支</span><br><span class="line"> git checkout -- 切换需要将代码合入的分支</span><br><span class="line"> -b           -- 添加后缀是新建切换并新建分支（这时候一般不需要）</span><br><span class="line"> git 需合入代码的分支 merge 被合并的分支 （复现冲突的代码，然后根据情况进行保留）</span><br><span class="line"> ～冲突解决之后通过commit 和 push 完成代码合并～</span><br><span class="line"> <span class="comment">// 如果忘记切换新分支，直接在master开发</span></span><br><span class="line"> <span class="number">1.</span>先将master这些修改提交，但是不要推送</span><br><span class="line">   git add .</span><br><span class="line">   git commit -m <span class="string">&#x27;commit&#x27;</span></span><br><span class="line"> <span class="number">2.</span>切换会修改前的那个分支</span><br><span class="line">   git checkout xxx</span><br><span class="line"> <span class="number">3.</span>回退到之前需要的commit版本（刚开始提交过一次commit为错误分支开发内容），并且在这个版本新建分支</span><br><span class="line"> <span class="number">4.</span>切换到之前在master修改的那个版本</span><br><span class="line">   git reset --hard commitID</span><br><span class="line"> <span class="number">5.</span>推送到远程</span><br></pre></td></tr></table></figure><h4 id="3-渐入佳境的Git-——折腾折腾就会了"><a href="#3-渐入佳境的Git-——折腾折腾就会了" class="headerlink" title="3.渐入佳境的Git ——折腾折腾就会了"></a>3.渐入佳境的Git <em>——折腾折腾就会了</em></h4><!--遇到问题，然后找方法解决是一个提高的过程--><p>了解Git的工作原理，有利于使用这个工具</p><p>1.每一次commit 都是一次指针指向</p><p>2.每一个push 推送的都是相较于之前新增的部分内容</p><p>3.每一个merge 合并的都是要通过对比差异</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求一 &gt;&gt;&gt; 多次提交commit 但中间有一次不需要了</span></span><br><span class="line">---------------</span><br><span class="line">git revert commit-id (撤销指定的版本，撤销也会作为一次提交进行保存）</span><br><span class="line">  -- 提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容</span><br><span class="line"><span class="comment">// 需求二 &gt;&gt;&gt; 版本回滚</span></span><br><span class="line">---------------</span><br><span class="line">git reset commit_id （回退到上一个 提交的节点（即目标版本号） 代码还是原来你修改的）</span><br><span class="line">git reset –hard commit_id （回退到上一个commit节点， 代码也发生了改变，变成上一次的）</span><br><span class="line">                          也可【 git reset --hard  <span class="variable constant_">HEAD</span>^ 或者git reset <span class="variable constant_">HEAD</span>^ 】</span><br><span class="line"> 【--hard 强制覆盖代码 ｜｜ --soft 保留工作目录，并把重置文件所带来的新的差异放进暂存区】</span><br><span class="line">&gt;&gt;&gt;回滚后需要强制推送，因为远程仓库版本高于本地 会造成冲突麻烦</span><br><span class="line">git push -f ｜｜ git push --force</span><br><span class="line"><span class="comment">// 辅助命令 &gt;&gt;&gt; 查看历史记录</span></span><br><span class="line">git log </span><br><span class="line">【如果不带任何参数，它会列出所有历史记录，按q退出历史记录列表 不包括已经被删除的 commit 记录和reset的操作】</span><br><span class="line">git reflog</span><br><span class="line"> 【（包括已经被删除的 commit 记录和 reset 的操作）】</span><br><span class="line">～显示参数</span><br><span class="line">  -p：按补丁显示每个更新间的差异，比下一条- -stat命令信息更全</span><br><span class="line">  --stat：显示每次更新的修改文件的统计信息，每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计</span><br><span class="line">  --pretty=oneline：只会显示版本号和提交时的备注信息</span><br><span class="line">  --shortstat：只显示--stat中最后的行数添加修改删除统计</span><br><span class="line">  --name-only：尽在已修改的提交信息后显示文件清单</span><br><span class="line">  --name-status：显示新增、修改和删除的文件清单</span><br><span class="line">  --abbrev-commit：仅显示<span class="variable constant_">SHA</span>-<span class="number">1</span>的前几个字符，而非所有的<span class="number">40</span>个字符</span><br><span class="line">  --relative-date：使用较短的相对时间显示（例如：<span class="string">&quot;two weeks ago&quot;</span>）</span><br><span class="line">  --graph：显示<span class="variable constant_">ASCII</span>图形表示的分支合并历史</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo快速搭建</title>
      <link href="/2023/09/15/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/09/15/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。即把用户的markdown文件，按照指定的主题解析成静态网页。</strong><br><em>——白嫖的总是最好的，单是基于静态网页布置（如果需要搞个性域名的话另说），以及个性化主题的配置，我感觉用hexo+github+node.js是比较不错的，代码工具的话vscode和webStorm都可以</em>。</p></blockquote><p>废话不多说，我这里只是简单的一个搭建，有兴趣的话可以从网上查找大神们的各种配置自己进行搭配。</p><p>下面开始 &gt;&gt;&gt;</p><h2 id="1-安装Node-js和git"><a href="#1-安装Node-js和git" class="headerlink" title="1.安装Node.js和git"></a>1.安装Node.js和git</h2><p>这一步（git需要调整镜像源，我是用淘宝的），自行找官网安装即可，一般做程序员的话基本都已经具备了。</p><h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2.安装Hexo"></a>2.安装Hexo</h2><p>   选择一个磁盘，创建文件夹（这个就是Blogs的本地目录了）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">---------------------</span><br><span class="line">因为我是mac的。所以要在前面添加权限命令 sudo</span><br><span class="line">- 然后操作的话也是将文件夹啦到vscode中进行命令操作的</span><br><span class="line">- windows版本，进入文件夹中，右键 git bash here,并粘贴代码回车运行</span><br></pre></td></tr></table></figure><h3 id="2-1-初始化本地Blogs"><a href="#2-1-初始化本地Blogs" class="headerlink" title="2.1 初始化本地Blogs"></a>2.1 初始化本地Blogs</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo init 你博客的文件夹名</span><br><span class="line">cd 文件夹名/   #进入你的文件夹根目录</span><br><span class="line">npm install  #安装依赖</span><br></pre></td></tr></table></figure><p>等待运行完成，此时文件夹中多了许多文件， 此时 Hexo 框架的本地搭建已经完成了</p><p>运行<strong>hexo s</strong> 启动本地服务器，用于预览主题。 默认地址：<a href="http://localhost:4000/">http://localhost:4000/</a></p><h3 id="2-2-配置gitHub远程仓库"><a href="#2-2-配置gitHub远程仓库" class="headerlink" title="2.2 配置gitHub远程仓库"></a>2.2 配置gitHub远程仓库</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、初始化本地仓库：</span><br><span class="line">git init</span><br><span class="line"><span class="number">2</span>、连接远程仓库：</span><br><span class="line">如果是第一次使用git，在使用git的时候会提示输入用户名和密码，用户名是自己的注册邮箱。</span><br><span class="line">git remote add origin <span class="attr">https</span>:<span class="comment">//github.com/wapchief/wapchief.github.io.git</span></span><br><span class="line"><span class="number">3</span>、发布hexo到github page</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line"><span class="number">4</span>、添加文件到本地仓库</span><br><span class="line">git add</span><br><span class="line"><span class="number">5</span>、提交声明</span><br><span class="line">git commit -m <span class="string">&#x27;内容&#x27;</span></span><br><span class="line"><span class="number">6</span>、推送到远程仓库（github）</span><br><span class="line">————————————————</span><br><span class="line"># 这里的注意点就是必须要把仓库名设置为用户名</span><br><span class="line"># 必须以 账号名.<span class="property">github</span>.<span class="property">io</span> 进行设置</span><br></pre></td></tr></table></figure><!-- ![在这里插入图片描述](https://img-blog.csdnimg.cn/fe864f21fabc4ae692a2a99334a60acb.png) --><h2 id="3-hexo的命令介绍"><a href="#3-hexo的命令介绍" class="headerlink" title="3.hexo的命令介绍"></a>3.hexo的命令介绍</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo s # hexo server 的缩写，命令效果一致</span><br><span class="line">hexo server -p <span class="number">5000</span> # 指定端口号运行</span><br><span class="line">--------------</span><br><span class="line">预览的同时可以修改文章内容或主题代码，保存后刷新页面即可</span><br><span class="line">对 <span class="title class_">Hexo</span> 根目录 _config.<span class="property">yml</span> 的修改，需要重启本地服务器后才能预览效果</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">&#x27;文章名&#x27;</span></span><br><span class="line">--------------</span><br><span class="line">新建文章，文章标题可以在对应 md 文件里改，新建时标题可以写的简单些</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo d # hexo deploy 的缩写，命令效果一致</span><br><span class="line">--------------</span><br><span class="line">自动生成网站静态文件，并部署到设定的仓库</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo clean # 清除缓存文件 db.<span class="property">json</span> 和已生成的静态文件 public </span><br><span class="line">-------------</span><br><span class="line">网站显示异常时可以执行这条命令试试,可以解决一些灵异的bug</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo g # hexo generate 的缩写，命令效果一致</span><br><span class="line">-------------</span><br><span class="line">生成网站静态文件到默认设置的 public 文件夹</span><br><span class="line">- 便于查看网站生成的静态文件或者手动部署网站；</span><br><span class="line">- 如果使用自动部署，不需要先执行该命令；</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page 页面名 # 新建一个标题为***的页面，默认链接地址为 主页地址/页面名/</span><br><span class="line">-------------</span><br><span class="line">标题可以为中文，但一般习惯用英文；</span><br><span class="line">页面标题和文章一样可以随意修改；</span><br><span class="line">页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。</span><br></pre></td></tr></table></figure><h2 id="4-配置Hexo"><a href="#4-配置Hexo" class="headerlink" title="4.配置Hexo"></a>4.配置Hexo</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Hexo</span>的结构目录</span><br><span class="line">---------------------------</span><br><span class="line">├── .<span class="property">deploy</span>          #部署文件夹</span><br><span class="line">├── public           #html源码，hexo g生成</span><br><span class="line">├── scaffolds        #模板</span><br><span class="line">├── scripts          #扩展脚本</span><br><span class="line">├── source           #文章源码</span><br><span class="line">|   ├── _drafts      #草稿</span><br><span class="line">|   └── _posts       #文章</span><br><span class="line">├── themes           #主题</span><br><span class="line">|   ├── butterfly    #butterfly主题</span><br><span class="line">├── _config.<span class="property">yml</span>      #博客配置</span><br><span class="line">└── package.<span class="property">json</span>     #应用程序数据</span><br></pre></td></tr></table></figure><p>当我们安装完毕的时候，就需要对Hexo进行一些配置，具体是通过<code>_config.yml</code>文件来完成的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Site</span></span><br><span class="line"><span class="attr">title</span>: 网站标题</span><br><span class="line"><span class="attr">subtitle</span>: 副标题</span><br><span class="line"><span class="attr">description</span>: 个人签名</span><br><span class="line"><span class="attr">author</span>: 姓名</span><br><span class="line"><span class="attr">language</span>: zh-<span class="title class_">Hans</span></span><br><span class="line"><span class="attr">timezone</span>:</span><br><span class="line">-----------</span><br><span class="line"><span class="number">1</span>、 所有的配置“:”符号后面都要带空格，否则执行本地测试直接失败。</span><br><span class="line"><span class="number">2</span>、language是设置语言。zh-<span class="title class_">Hans</span>是中文。</span><br><span class="line"><span class="number">3</span>、如果设置zh-<span class="title class_">Hans</span>后仍出现乱码问题。需要更改文件的字符编码集为<span class="variable constant_">UTF</span>-<span class="number">8</span>,方法很多具体，就不详细介绍了。</span><br></pre></td></tr></table></figure><p>根目录_config.yml中配置自己的远程仓库地址</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Deployment</span></span><br><span class="line">## <span class="title class_">Docs</span>: <span class="attr">https</span>:<span class="comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy</span>:</span><br><span class="line">  <span class="attr">type</span>: git</span><br><span class="line">  <span class="attr">repository</span>: git@github.<span class="property">com</span>:<span class="title class_">Aurorezread</span>/<span class="title class_">Ji</span>-<span class="title class_">Nian</span>.<span class="property">github</span>.<span class="property">io</span>.<span class="property">git</span>  #你的仓库地址</span><br><span class="line">  <span class="attr">branch</span>: master #绑定的仓库分支</span><br><span class="line">  -----------</span><br><span class="line">    我直接用ssh进行的绑定，想来会比https方便许多</span><br></pre></td></tr></table></figure><p>根目录_config.yml中配置配置主题  &gt;&gt;&gt; 在博客的根目录下执行以下命令</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git clone -b master <span class="attr">https</span>:<span class="comment">//github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span></span><br><span class="line"># 下载 pug 以及 stylus 的渲染器，否则在项目运行时会报错</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br><span class="line"># 修改项目根目录下的_config.<span class="property">yml</span>文件（称为站点配置文件），开启主题</span><br><span class="line"># <span class="title class_">Extensions</span></span><br><span class="line">## <span class="title class_">Plugins</span>: <span class="attr">https</span>:<span class="comment">//hexo.io/plugins/</span></span><br><span class="line">## <span class="title class_">Themes</span>: <span class="attr">https</span>:<span class="comment">//hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme</span>: butterfly  # 主题样式有很多。这是我配置的，可以找一个自己喜欢的</span><br></pre></td></tr></table></figure><h3 id="导航栏配置"><a href="#导航栏配置" class="headerlink" title="导航栏配置"></a><strong>导航栏配置</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu</span>:</span><br><span class="line">  首页: / || fa fa-home</span><br><span class="line">  归档: <span class="regexp">/archives/</span> || fa fa-archive</span><br><span class="line">  标签: <span class="regexp">/tags/</span> || fa fa-tags</span><br><span class="line">  分类: <span class="regexp">/categories/</span> || fa fa-folder-open</span><br><span class="line">  留言板: <span class="regexp">/messageboard/</span> || fa fa-paper-plane</span><br><span class="line">  友链: <span class="regexp">/link/</span> || fa fa-link</span><br><span class="line">  日志: <span class="regexp">/timeline/</span> || fa fa-bell</span><br><span class="line">  菜单 || fa fa-<span class="attr">list</span>:</span><br><span class="line">    - about || <span class="regexp">/about/</span> || fa fa-sitemap</span><br><span class="line">    - myself || <span class="regexp">/myself/</span> || fa fa-id-card</span><br><span class="line">    - butterfly || <span class="attr">https</span>:<span class="comment">//github.com/jerryc127/hexo-theme-butterfly/ || fa fa-heart</span></span><br><span class="line">————————————————</span><br><span class="line">利用命令 hexo <span class="keyword">new</span> page archives  # 创建归档文件夹（以此为例）</span><br></pre></td></tr></table></figure><p><strong>导航栏配置</strong> — 详细</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 修改：source/tags/index.<span class="property">md</span></span><br><span class="line">---</span><br><span class="line"><span class="attr">title</span>: 标签</span><br><span class="line"><span class="attr">date</span>: <span class="number">2022</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">08</span>:<span class="number">45</span>:<span class="number">06</span></span><br><span class="line"><span class="attr">type</span>: tags</span><br><span class="line">---</span><br><span class="line"># 以后上传文章的md文件中，可以在标题头中加入tags，包含 标签 文章的例子：</span><br><span class="line">---</span><br><span class="line"><span class="attr">title</span>: 学习 java 这一篇就够了</span><br><span class="line"><span class="attr">tag</span>: </span><br><span class="line">  - 后端</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 分类</span><br><span class="line">---</span><br><span class="line"><span class="attr">title</span>: 分类</span><br><span class="line"><span class="attr">date</span>: <span class="number">2022</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">08</span>:<span class="number">54</span>:<span class="number">29</span></span><br><span class="line"><span class="attr">type</span>: categories</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># 留言板</span><br><span class="line">---</span><br><span class="line"><span class="attr">title</span>: 留言板</span><br><span class="line"><span class="attr">date</span>: <span class="number">2022</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">08</span>:<span class="number">58</span>:<span class="number">20</span></span><br><span class="line"><span class="attr">type</span>: messageboard</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># 友链</span><br><span class="line">---</span><br><span class="line"><span class="attr">title</span>: 友链</span><br><span class="line"><span class="attr">date</span>: <span class="number">2022</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">09</span>:<span class="number">00</span>:<span class="number">05</span></span><br><span class="line"><span class="attr">type</span>: link</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># 日志</span><br><span class="line">---</span><br><span class="line"><span class="attr">title</span>: 日志</span><br><span class="line"><span class="attr">date</span>: <span class="number">2022</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">09</span>:<span class="number">02</span>:<span class="number">25</span></span><br><span class="line"><span class="attr">type</span>: timeline</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># 关于</span><br><span class="line">---</span><br><span class="line"><span class="attr">title</span>: <span class="title class_">This</span> is me</span><br><span class="line"><span class="attr">date</span>: <span class="number">2022</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">09</span>:<span class="number">04</span>:<span class="number">02</span></span><br><span class="line"><span class="attr">type</span>: myself</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>**副标题配置 **&gt;&gt;&gt; 修改 bufferfly下的 _config.yml</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">subtitle</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  # <span class="title class_">Typewriter</span> <span class="title class_">Effect</span> (开启打字效果)</span><br><span class="line">  <span class="attr">effect</span>: <span class="literal">true</span></span><br><span class="line">  # loop (循環打字)</span><br><span class="line">  <span class="attr">loop</span>: <span class="literal">true</span></span><br><span class="line">  # source調用第三方服務</span><br><span class="line">  # <span class="attr">source</span>: <span class="literal">false</span> 關閉調用</span><br><span class="line">  # <span class="attr">source</span>: <span class="number">1</span>  調用搏天api的隨機語錄（簡體）</span><br><span class="line">  # <span class="attr">source</span>: <span class="number">2</span>  調用一言網的一句話（簡體）</span><br><span class="line">  # <span class="attr">source</span>: <span class="number">3</span>  調用一句網（簡體）</span><br><span class="line">  # <span class="attr">source</span>: <span class="number">4</span>  調用今日詩詞（簡體）</span><br><span class="line">  # subtitle 會先顯示 source , 再顯示 sub 的內容</span><br><span class="line">  <span class="attr">source</span>: <span class="literal">false</span></span><br><span class="line">  # 如果有英文逗号<span class="string">&#x27; , &#x27;</span>,请使用转义字元 &amp;#<span class="number">44</span>;</span><br><span class="line">  # 如果有英文双引号<span class="string">&#x27; &quot; &#x27;</span>,请使用转义字元 &amp;quot;</span><br><span class="line">  # 开头不允許转义字元，如需要，请把整個句子用双引号包住</span><br><span class="line">  # 如果关闭打字效果，subtitle只会现示sub的第一行文字</span><br><span class="line">  <span class="attr">sub</span>:</span><br><span class="line">    - 你在抱怨什么呢</span><br><span class="line">    - 为明天到来的事，说人生像是没有意义</span><br><span class="line">    - 没有选择会是唯一的路</span><br><span class="line">    - 这不是你自己的问题，人终归要好好去生活</span><br><span class="line">————————————————</span><br><span class="line">副标题字体大小颜色</span><br><span class="line">在\themes\butterfly\source\css_layout中的head.<span class="property">styl</span>:中修改</span><br></pre></td></tr></table></figure><p><strong>图片设置</strong></p><ul><li><p><a href="http://pic.netbian.com/4kdongman/index_2.html">http://pic.netbian.com/4kdongman/index_2.html</a> 送你个图片地址</p></li><li><p>图片可以用云图片链接或者放在本地文件夹位置：&#x2F;themes&#x2F;butterfly&#x2F;source&#x2F;img.以下代码在主题的配置文件中修改</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Favicon</span>（网站图标）</span><br><span class="line"><span class="attr">favicon</span>: <span class="regexp">/img/</span>favicon.<span class="property">png</span></span><br><span class="line"></span><br><span class="line"># 头像</span><br><span class="line"><span class="attr">avatar</span>:</span><br><span class="line">  <span class="attr">img</span>: <span class="regexp">/img/</span>avatar.<span class="property">jpg</span> #图片路径</span><br><span class="line">  <span class="attr">effect</span>: <span class="literal">false</span> #头像会一直转圈</span><br><span class="line">  </span><br><span class="line"># 主页封面图片</span><br><span class="line"># <span class="title class_">The</span> banner image <span class="keyword">of</span> home page</span><br><span class="line"><span class="attr">index_img</span>: <span class="regexp">/img/</span>background.<span class="property">jpg</span></span><br><span class="line"></span><br><span class="line"># 文章详情页的顶部图片</span><br><span class="line"># 当没有在front-matter设置top_img和cover的情况下会显示该图</span><br><span class="line"># <span class="title class_">If</span> the banner <span class="keyword">of</span> page not setting, it will show the top_img</span><br><span class="line"><span class="attr">default_top_img</span>: <span class="regexp">/img/</span>default_top_img.<span class="property">jpg</span> #我设置的本地图片</span><br><span class="line"></span><br><span class="line"># 文章封面</span><br><span class="line"># 篇文章都可以设置一张封面，可以为每篇文章设置默认封面</span><br><span class="line">也可以修改每个md文件的front-matter的cover属性，会覆盖上面的默认封面。</span><br><span class="line"><span class="attr">cover</span>:</span><br><span class="line">  <span class="attr">index_enable</span>: <span class="literal">true</span> #  是否展示文章封面</span><br><span class="line">  <span class="attr">aside_enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">position</span>: both # 封面展示的位置 left/right/both</span><br><span class="line">  # 当没有设置cover时，默认展示的文章封面</span><br><span class="line">  <span class="attr">default_cover</span>:</span><br><span class="line">    # 当配置多张图片时，会随机选择一张作为 cover. 此时写法为</span><br><span class="line">    - <span class="attr">https</span>:</span><br><span class="line">    - <span class="attr">http</span>:</span><br><span class="line">    - <span class="attr">http</span>:</span><br><span class="line">    - <span class="attr">http</span>:</span><br><span class="line">    - <span class="attr">http</span>:</span><br><span class="line">    - <span class="attr">http</span>:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
